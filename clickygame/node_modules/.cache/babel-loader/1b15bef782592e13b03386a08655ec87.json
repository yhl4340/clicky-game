{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Erin\\\\Desktop\\\\UWbootcamp\\\\clicky-game\\\\clickygame\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Jumbotron from './components/Jumbotron';\nimport Navbar from './components/Navbar';\nimport Cards from './components/Cards';\nimport friends from './friends.json';\nlet msg = '';\nlet correctScore = 0;\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      clicked: false,\n      friends,\n      correctScore: 0,\n      msg: \"\"\n    };\n\n    this.newFriend = id => {\n      // new array for friends.json\n      let newfriends = this.state.friends; // map through the new array that will have the updated clicked prop\n      // filter for match\n      // returns array with matching obj\n\n      let matched = newfriends.filter(newfriend => newfriend.id === id)[0]; // if there is a match\n\n      if (matched.clicked) {\n        console.log(matched, 'match000');\n        this.setState({\n          clicked: true\n        });\n        console.log(matched, 'match 0'); // below is to reset back to false      \n        // for (let i = 0; i <friends.length; i++){\n        //   friends[i].clicked = false;\n        // }\n\n        this.setState({\n          friends\n        });\n        this.setState({\n          correctScore\n        });\n        this.setState({\n          msg: \"already clicked. sorry\"\n        });\n      } else {\n        // if no match\n        console.log(\"pic clicked\", matched.clicked, \"id of pic clicked\");\n        newfriends.sort((a, b) => {\n          return 0.5 - Math.random();\n        });\n        this.setState({\n          correctScore: this.state.correctScore + 1,\n          msg: \"Good Job\"\n        });\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      score: this.correctScore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(Jumbotron, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, this.state.msg), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, this.state.correctScore), this.state.friends.map(friend => React.createElement(Cards, {\n      id: friend.id,\n      key: friend.id,\n      image: friend.image,\n      newFriend: this.newFriend,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Erin\\Desktop\\UWbootcamp\\clicky-game\\clickygame\\src\\App.js"],"names":["React","Component","Jumbotron","Navbar","Cards","friends","msg","correctScore","App","state","clicked","newFriend","id","newfriends","matched","filter","newfriend","console","log","setState","sort","a","b","Math","random","render","map","friend","image"],"mappings":";AACA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,WAAP;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,IAAIC,GAAG,GAAG,EAAV;AACA,IAAIC,YAAY,GAAG,CAAnB;;AACA,MAAMC,GAAN,SAAkBP,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BQ,KAD0B,GAClB;AACNC,MAAAA,OAAO,EAAE,KADH;AAENL,MAAAA,OAFM;AAGNE,MAAAA,YAAY,EAAE,CAHR;AAIND,MAAAA,GAAG,EAAE;AAJC,KADkB;;AAAA,SAkB1BK,SAlB0B,GAkBdC,EAAE,IAAI;AAEhB;AACA,UAAIC,UAAU,GAAG,KAAKJ,KAAL,CAAWJ,OAA5B,CAHgB,CAIhB;AAEA;AACA;;AACA,UAAIS,OAAO,GAAGD,UAAU,CAACE,MAAX,CAAkBC,SAAS,IAAIA,SAAS,CAACJ,EAAV,KAAiBA,EAAhD,EAAoD,CAApD,CAAd,CARgB,CAShB;;AACA,UAAIE,OAAO,CAACJ,OAAZ,EAAqB;AACnBO,QAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ,EAAoB,UAApB;AACA,aAAKK,QAAL,CAAc;AAACT,UAAAA,OAAO,EAAC;AAAT,SAAd;AACAO,QAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ,EAAqB,SAArB,EAHmB,CAKnB;AACA;AACA;AAEA;;AACA,aAAKK,QAAL,CAAc;AAAEd,UAAAA;AAAF,SAAd;AACA,aAAKc,QAAL,CAAc;AAAEZ,UAAAA;AAAF,SAAd;AACA,aAAKY,QAAL,CAAc;AAAEb,UAAAA,GAAG,EAAE;AAAP,SAAd;AACD,OAbD,MAaO;AAEL;AAEAW,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BJ,OAAO,CAACJ,OAAnC,EAA4C,mBAA5C;AAEAG,QAAAA,UAAU,CAACO,IAAX,CAAgB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACxB,iBAAO,MAAMC,IAAI,CAACC,MAAL,EAAb;AACD,SAFD;AAGA,aAAKL,QAAL,CAAc;AACZZ,UAAAA,YAAY,EAAE,KAAKE,KAAL,CAAWF,YAAX,GAA0B,CAD5B;AAEZD,UAAAA,GAAG,EAAE;AAFO,SAAd;AAID;AACF,KAvDyB;AAAA;;AAyD1BmB,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AACA,MAAA,KAAK,EAAG,KAAKlB,YADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAGE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKE,KAAL,CAAWH,GAAhB,CAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKG,KAAL,CAAWF,YAAhB,CALF,EAMG,KAAKE,KAAL,CAAWJ,OAAX,CAAmBqB,GAAnB,CAAuBC,MAAM,IAC5B,oBAAC,KAAD;AACE,MAAA,EAAE,EAAEA,MAAM,CAACf,EADb;AAEE,MAAA,GAAG,EAAEe,MAAM,CAACf,EAFd;AAGE,MAAA,KAAK,EAAEe,MAAM,CAACC,KAHhB;AAIE,MAAA,SAAS,EAAE,KAAKjB,SAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CANH,CADF;AAiBD;;AA3EyB;;AA8E5B,eAAeH,GAAf","sourcesContent":["\nimport React, {Component} from 'react'\nimport './App.css';\nimport Jumbotron from './components/Jumbotron';\nimport Navbar from './components/Navbar';\nimport Cards from './components/Cards';\nimport friends from './friends.json';\nlet msg = '';\nlet correctScore = 0;\nclass App extends Component {\n  state = {\n    clicked: false,\n    friends,\n    correctScore: 0,\n    msg: \"\"\n  };\n// shuffle the imported friends \n// shuffle = friends => {\n//   let shuffledFriends = friends.sort(function(a,b){return 0.5 - Math.random()});\n//   return shuffledFriends;\n// }\n// reset all clicked props to false\n// reset = friends => {\n//   let resetFriends = friends.map(friend => ({...friend, clicked: false}));\n//   return this.shuffle(resetFriends)\n// }\n// check if a card has been clicked before. then update clicked property\n  newFriend = id => {\n\n    // new array for friends.json\n    let newfriends = this.state.friends;\n    // map through the new array that will have the updated clicked prop\n    \n    // filter for match\n    // returns array with matching obj\n    let matched = newfriends.filter(newfriend => newfriend.id === id)[0];\n    // if there is a match\n    if (matched.clicked) {\n      console.log(matched,'match000')\n      this.setState({clicked:true})\n      console.log(matched, 'match 0')\n     \n      // below is to reset back to false      \n      // for (let i = 0; i <friends.length; i++){\n      //   friends[i].clicked = false;\n  \n      // }\n      this.setState({ friends });\n      this.setState({ correctScore });\n      this.setState({ msg: \"already clicked. sorry\" });\n    } else {\n      \n      // if no match\n     \n      console.log(\"pic clicked\", matched.clicked, \"id of pic clicked\");\n      \n      newfriends.sort((a, b) => {\n        return 0.5 - Math.random();\n      });\n      this.setState({\n        correctScore: this.state.correctScore + 1,\n        msg: \"Good Job\"\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar \n        score ={this.correctScore}/>\n        <Jumbotron />\n        <h3>{this.state.msg}</h3>\n        <h4>{this.state.correctScore}</h4>\n        {this.state.friends.map(friend => (\n          <Cards\n            id={friend.id}\n            key={friend.id}\n            image={friend.image}\n            newFriend={this.newFriend}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n    \nexport default App;\n"]},"metadata":{},"sourceType":"module"}