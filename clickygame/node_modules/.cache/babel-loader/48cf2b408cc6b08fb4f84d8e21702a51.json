{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Erin\\\\Desktop\\\\UWbootcamp\\\\clicky-game\\\\clickygame\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Jumbotron from './components/Jumbotron';\nimport Navbar from './components/Navbar';\nimport Cards from './components/Cards';\nimport friends from './friends.json';\nlet msg = '';\nlet correctScore = 0;\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      clicked: 0,\n      friends,\n      correctScore: 0,\n      clickedArr: [],\n      msg: ''\n    };\n\n    this.shuffle = () => {\n      for (var i = 0; i < friends.length; i++) {\n        const j = Math.floor(Math.random() * i + 1);\n        const curFriend = friends[i];\n        friends[i] = friends[j];\n        friends[j] = curFriend;\n      }\n    };\n\n    this.newFriend = id => {\n      // new array for friends.json\n      const friends = this.state.friends; // filter out friend that is clicked\n\n      let matched = friends.filter(friend => friend.id === id);\n\n      for (var i = 0; i < matched.length; i++) {\n        if (matched[0].clicked) {\n          matched[i].clicked = false;\n          this.setState({\n            msg: 'already clicked'\n          });\n          this.setState({\n            friends\n          });\n          this.setState({\n            correctScore\n          });\n          console.log(this.state, 'sorry,matched');\n          console.log('score', correctScore);\n          matched = Math.floor(Math.random() * i + 1);\n        } else {\n          matched[0].clicked = true;\n          this.msg = \"start again\";\n          this.setState({\n            correctScore: 0\n          });\n          console.log('pic clicked', matched[0].clicked);\n        }\n      }\n    };\n  }\n\n  // handleClick = event => {\n  //   const btnType = event.target.clicked;\n  //    const newFriends = friends;\n  //    console.log('im clicked',this.state.id);\n  //    for (var i = 0; i< newFriends.length; i++){\n  //      if(btnType=== 1){\n  //        newFriends.image =  Math.floor(Math.random()*i+1)\n  //      console.log('1x ');\n  //     this.setState({clicked: this.state.clicked + 1})\n  //     this.setState({correctScore: this.state.correctScore + 1})\n  //     }\n  //     if(btnType<2){\n  //       console.log('2x')\n  //       this.setState({clicked:''})\n  //     }\n  //    }\n  // };\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(Jumbotron, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), this.state.friends.map(friend => React.createElement(Cards, {\n      id: friend.id,\n      key: friend.id,\n      image: friend.image,\n      newFriend: this.newFriend,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Erin\\Desktop\\UWbootcamp\\clicky-game\\clickygame\\src\\App.js"],"names":["React","Component","Jumbotron","Navbar","Cards","friends","msg","correctScore","App","state","clicked","clickedArr","shuffle","i","length","j","Math","floor","random","curFriend","newFriend","id","matched","filter","friend","setState","console","log","render","map","image"],"mappings":"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","sourcesContent":["\nimport React, {Component} from 'react'\nimport './App.css';\nimport Jumbotron from './components/Jumbotron';\nimport Navbar from './components/Navbar';\nimport Cards from './components/Cards';\nimport friends from './friends.json';\nlet msg = '';\nlet correctScore = 0;\nclass App extends Component {\n  state = {\n        clicked : 0,\n        friends,\n        correctScore: 0,\n        clickedArr:[],\n        msg: ''\n  };\n\n\nshuffle = () => {\nfor (var i = 0; i< friends.length; i++){    \n      const j =  Math.floor(Math.random()*i+1);\n      const curFriend = friends[i];\n      friends[i]= friends[j];\n      friends[j] = curFriend;\n      }\n};\n\nnewFriend = id => {\n  // new array for friends.json\n  const friends = this.state.friends;\n  // filter out friend that is clicked\n  let matched = friends.filter(friend => friend.id=== id)\n   for(var i = 0; i< matched.length; i ++){\n      \n      if(matched[0].clicked){\n        matched[i].clicked = false;\n        \n        this.setState({msg:'already clicked'});\n        this.setState({friends});\n        this.setState({correctScore});\n        console.log(this.state,'sorry,matched');\n        console.log('score',correctScore);\n        matched = Math.floor(Math.random()*i+1)\n      } else  {\n        matched[0].clicked = true;       \n        this.msg=\"start again\";\n        this.setState({\n          correctScore: 0});\n        console.log('pic clicked',matched[0].clicked)\n  } \n}\n};\n\n// handleClick = event => {\n//   const btnType = event.target.clicked;\n   \n//    const newFriends = friends;\n//    console.log('im clicked',this.state.id);\n//    for (var i = 0; i< newFriends.length; i++){\n//      if(btnType=== 1){\n//        newFriends.image =  Math.floor(Math.random()*i+1)\n//      console.log('1x ');\n//     this.setState({clicked: this.state.clicked + 1})\n//     this.setState({correctScore: this.state.correctScore + 1})\n//     }\n//     if(btnType<2){\n//       console.log('2x')\n//       this.setState({clicked:''})\n//     }\n//    }\n   \n// };\n \n  render() {\n\n    return (\n    <div>\n      <Navbar/>\n        <Jumbotron/>\n        {this.state.friends.map(friend => (\n          <Cards\n            id={friend.id}\n            key= {friend.id}\n            image={friend.image}\n            newFriend= {this.newFriend}\n            />\n        ))}\n\n      </div>\n\n    )}\n      }\n    \nexport default App;\n"]},"metadata":{},"sourceType":"module"}