{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Erin\\\\Desktop\\\\UWbootcamp\\\\clicky-game\\\\clickygame\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\Erin\\\\Desktop\\\\UWbootcamp\\\\clicky-game\\\\clickygame\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Jumbotron from './components/Jumbotron';\nimport Navbar from './components/Navbar';\nimport Cards from './components/Cards';\nimport friends from './friends.json';\nlet msg = '';\nlet correctScore = 0;\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      clicked: false,\n      friends,\n      correctScore: 0,\n      msg: \"\"\n    };\n\n    this.shuffle = friends => {\n      let shuffledFriends = friends.sort(function (a, b) {\n        return 0.5 - Math.random();\n      });\n      return shuffledFriends;\n    };\n\n    this.reset = friends => {\n      let resetFriends = friends.map(friend => _objectSpread({}, friend, {\n        clicked: false\n      }));\n      return this.shuffle(reset);\n    };\n\n    this.newFriend = id => {\n      let correctGuess = false; // new array for friends.json\n\n      let newfriends = this.state.friends; // map through the new array that will have the updated clicked prop\n\n      newfriends.map(friend => {\n        if (friend.id === id) {\n          if (!friend.clicked) {\n            friend.clicked = true;\n            this.setState({\n              clicked: this.state.clicked\n            });\n          }\n\n          ;\n        }\n\n        ;\n      }); // filter for match\n      // let matched = newfriends.filter(newfriend => newfriend.id === id)\n\n      console.log(matched, 'match000'); // if there is a match\n\n      if (matched[0].clicked) {\n        console.log(matched[0], 'match 0'); // below is to reset back to false      \n\n        for (let i = 0; i < friends.length; i++) {\n          friends[i].clicked = false;\n        }\n\n        this.setState({\n          friends\n        });\n        this.setState({\n          correctScore\n        });\n        this.setState({\n          msg: \"already clicked. sorry\"\n        });\n      } else {\n        // if no match\n        console.log(\"pic clicked\", matched[0].clicked, \"id of pic clicked\");\n        newfriends.sort((a, b) => {\n          return 0.5 - Math.random();\n        });\n        this.setState({\n          correctScore: this.state.correctScore + 1,\n          msg: \"Good Job\"\n        });\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      score: this.correctScore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(Jumbotron, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, this.state.msg), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, this.state.correctScore), this.state.friends.map(friend => React.createElement(Cards, {\n      id: friend.id,\n      key: friend.id,\n      image: friend.image,\n      newFriend: this.newFriend,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Erin\\Desktop\\UWbootcamp\\clicky-game\\clickygame\\src\\App.js"],"names":["React","Component","Jumbotron","Navbar","Cards","friends","msg","correctScore","App","state","clicked","shuffle","shuffledFriends","sort","a","b","Math","random","reset","resetFriends","map","friend","newFriend","id","correctGuess","newfriends","setState","console","log","matched","i","length","render","image"],"mappings":"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","sourcesContent":["\nimport React, {Component} from 'react'\nimport './App.css';\nimport Jumbotron from './components/Jumbotron';\nimport Navbar from './components/Navbar';\nimport Cards from './components/Cards';\nimport friends from './friends.json';\nlet msg = '';\nlet correctScore = 0;\nclass App extends Component {\n  state = {\n    clicked: false,\n    friends,\n    correctScore: 0,\n    msg: \"\"\n  };\n\n\n\n\n// shuffle the imported friends \nshuffle = friends => {\n  let shuffledFriends = friends.sort(function(a,b){return 0.5 - Math.random()});\n  return shuffledFriends;\n}\n// reset all clicked props to false\nreset = friends => {\n  let resetFriends = friends.map(friend => ({...friend, clicked: false}));\n  return this.shuffle(reset)\n}\n// check if a card has been clicked before. then update clicked property\n  newFriend = id => {\n    let correctGuess = false;\n    // new array for friends.json\n    let newfriends = this.state.friends;\n    // map through the new array that will have the updated clicked prop\n    newfriends.map(friend => {\n      if(friend.id === id){\n        if(!friend.clicked){\n          friend.clicked = true; \n      this.setState({clicked:this.state.clicked});\n        };\n      };\n\n\n    })\n  \n    // filter for match\n    \n    // let matched = newfriends.filter(newfriend => newfriend.id === id)\n  \n    console.log(matched,'match000')\n\n    // if there is a match\n    if (matched[0].clicked) {\n      console.log(matched[0], 'match 0')\n     \n      // below is to reset back to false      \n      for (let i = 0; i <friends.length; i++){\n        friends[i].clicked = false;\n  \n\n      }\n      this.setState({ friends });\n      this.setState({ correctScore });\n      this.setState({ msg: \"already clicked. sorry\" });\n    } else {\n      // if no match\n     \n      console.log(\"pic clicked\", matched[0].clicked, \"id of pic clicked\");\n      \n      newfriends.sort((a, b) => {\n        return 0.5 - Math.random();\n      });\n      this.setState({\n        correctScore: this.state.correctScore + 1,\n        msg: \"Good Job\"\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar \n        score ={this.correctScore}/>\n        <Jumbotron />\n        <h3>{this.state.msg}</h3>\n        <h4>{this.state.correctScore}</h4>\n        {this.state.friends.map(friend => (\n          <Cards\n            id={friend.id}\n            key={friend.id}\n            image={friend.image}\n            newFriend={this.newFriend}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n    \nexport default App;\n"]},"metadata":{},"sourceType":"module"}