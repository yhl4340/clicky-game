{"version":3,"sources":["components/Jumbotron/index.js","components/Navbar/index.js","components/Cards/index.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","_ref","children","react_default","a","createElement","className","Navbar","props","correctScore","Cards","onClick","newFriend","id","alt","name","src","image","App","state","friends","console","log","_this","newfriends","matched","filter","newfriend","clicked","setState","msg","sort","b","Math","random","_this2","this","components_Navbar","components_Jumbotron","map","friend","components_Cards","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4gDAWeA,MAPf,SAAAC,GACI,OAD4BA,EAAXC,SAEbC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,cACAH,EAAAC,EAAAC,cAAA,0DCKSE,MATjB,SAAgBC,GACZ,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACfH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,eAEAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,SAA4BE,EAAMC,sBCKzBC,MAXf,SAAgBF,GACZ,OACIL,EAAAC,EAAAC,cAAA,OAAKM,QAAW,kBAAKH,EAAMI,UAAUJ,EAAMK,KAAKP,UAAU,QACtDH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKS,IAAKN,EAAMO,KAAMC,IAAKR,EAAMS,MAAOJ,GAAIL,EAAMK,eCiEjDK,6MA7DbC,MAAQ,CACNC,UACAX,aAAc,KAIhBG,UAAY,SAAAC,GACVQ,QAAQC,IAAIC,EAAKJ,OAGjB,IAAIK,EAAaD,EAAKJ,MAAMC,QAExBK,EAAUD,EAAWE,OAAO,SAAAC,GAAS,OAAIA,EAAUd,KAAOA,IAAI,GAClEQ,QAAQC,IAAI,WAAYG,GAGpBA,EAAQG,SAGVL,EAAKM,SAAS,CAAEC,IAAK,+BACrBT,QAAQC,IAAIG,EAAS,YAErBD,EAAWO,KAAK,SAAC3B,EAAG4B,GAClB,MAAO,GAAMC,KAAKC,WAEpBX,EAAKM,SAAS,CAACpB,aAAa,MAG5BgB,EAAQG,SAAU,EAClBP,QAAQC,IAAI,cAAeG,EAAQG,QAAS,qBAE5CJ,EAAWO,KAAK,SAAC3B,EAAG4B,GAClB,MAAO,GAAMC,KAAKC,WAEpBX,EAAKM,SAAS,CACZpB,aAAcc,EAAKJ,MAAMV,aAAe,EACxCqB,IAAK,uFAKF,IAAAK,EAAAC,KACP,OACEjC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgC,EAAD,CACA5B,aAAe2B,KAAKjB,MAAMV,eAC1BN,EAAAC,EAAAC,cAACiC,EAAD,MACAnC,EAAAC,EAAAC,cAAA,UAAK+B,KAAKjB,MAAMW,KACfM,KAAKjB,MAAMC,QAAQmB,IAAI,SAAAC,GAAM,OAC5BrC,EAAAC,EAAAC,cAACoC,EAAD,CACE5B,GAAI2B,EAAO3B,GACX6B,IAAKF,EAAO3B,GACZI,MAAOuB,EAAOvB,MACdL,UAAWuB,EAAKvB,sBAtDV+B,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8fd70f21.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css'\r\n\r\n\r\nfunction Jumbotron ({children}) {\r\n    return (\r\n        <div className='jumbotron'>Click Click\r\n        <h2>Click on any images! But no repeats!</h2>\r\n        </div>\r\n    )\r\n}\r\nexport default Jumbotron;","import React from 'react';\r\nimport './style.css'\r\n\r\nfunction Navbar(props) {\r\n    return (\r\n      <nav className='navbar navbar-expand-lg navbar-dark'>\r\n      <p className='name'>Clicky Game</p>\r\n    \r\n      <p className='score'>Score:{props.correctScore}</p>\r\n    </nav>\r\n    );\r\n  }\r\n  export default Navbar;","import React from 'react';\r\nimport'./card.css';\r\nfunction Cards (props) {\r\n    return (\r\n        <div onClick = {()=> props.newFriend(props.id)} className=\"card\" >\r\n            <div className=\"img-container\">\r\n              <img alt={props.name} src={props.image} id={props.id}/>\r\n            </div>\r\n      </div>\r\n    \r\n    )\r\n}\r\n\r\nexport default Cards;","\nimport React, {Component} from 'react'\nimport './App.css';\nimport Jumbotron from './components/Jumbotron';\nimport Navbar from './components/Navbar';\nimport Cards from './components/Cards';\nimport friends from './friends.json';\n\n\nclass App extends Component {\n  state = {\n    friends,\n    correctScore: 0,\n  \n  };\n\n  newFriend = id => {\n    console.log(this.state);\n    \n    // new array for friends.json\n    let newfriends = this.state.friends; \n    // filter for match. returns array with matching obj\n    let matched = newfriends.filter(newfriend => newfriend.id === id)[0];\n    console.log('matched;', matched)\n\n    // if there is a match\n    if (matched.clicked) {\n      \n      // this.setState({ correctScore });\n      this.setState({ msg: \"Already clicked. Try again\" });\n      console.log(matched, \"match000\");\n\n      newfriends.sort((a, b) => {\n        return 0.5 - Math.random();\n      });\n      this.setState({correctScore:0})\n    } else {\n      // if no match\n      matched.clicked = true;\n      console.log(\"pic clicked\", matched.clicked, \"id of pic clicked\");\n\n      newfriends.sort((a, b) => {\n        return 0.5 - Math.random();\n      });\n      this.setState({\n        correctScore: this.state.correctScore + 1,\n        msg: \"Good Job\"\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar \n        correctScore ={this.state.correctScore}/>\n        <Jumbotron />\n        <h3>{this.state.msg}</h3>\n        {this.state.friends.map(friend => (\n          <Cards\n            id={friend.id}\n            key={friend.id}\n            image={friend.image}\n            newFriend={this.newFriend}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n    \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}